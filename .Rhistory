curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="")
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
gammai <- c(.3,.5)
alphai <- c(.6,.8)
deltai <- c(-1,1)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
gammai <- c(.3,.5,1)
alphai <- c(.6,.8,.1)
deltai <- c(-1,1,0)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
gammai <- c(.3,.5,0)
alphai <- c(.6,.8,.1)
deltai <- c(-1,1,0)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
gammai <- c(.3,.5,0)
alphai <- c(.6,.8,1)
deltai <- c(-1,1,0)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="3PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
@
curve((((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="2PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="2PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp((x-deltai[1])))/(1+exp((x-deltai[1]))))), from=-3, to=3, main="1PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp((x-deltai[2])))/(1+exp((x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp((x-deltai[3])))/(1+exp((x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
par(mfrow=c(3,1))
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="3PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="2PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp((x-deltai[1])))/(1+exp((x-deltai[1]))))), from=-3, to=3, main="1PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp((x-deltai[2])))/(1+exp((x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp((x-deltai[3])))/(1+exp((x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
options(height=100)
gammai <- c(.3,.5,0)
alphai <- c(.6,.8,1)
deltai <- c(-1,1,0)
par(mfrow=c(3,1))
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="3PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="2PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp((x-deltai[1])))/(1+exp((x-deltai[1]))))), from=-3, to=3, main="1PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp((x-deltai[2])))/(1+exp((x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp((x-deltai[3])))/(1+exp((x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
inf
dichX <- rbinom(1000,1,.5)
dichX
dichY <- rbinom(1000,1,sum(dichX==1)/length(dichX))
tab(dichX,dichY)
table(dichX,dichY,addmargins=T)
table(dichX,dichY)
phi(dichX,dichY)
dichX <- rbinom(1000,1,.5)
dichY <- rbinom(1000,1,sum(dichX==1)/length(dichX))
polyX <- rbinom(1000,1,.5)
polyY <- rbinom(1000,1,sum(dichX==1)/length(dichX))
length(dichY)
length(dichX)
summary(dichY,dichX)
table(dichX,dichY)
library(mokken)
??mokken
?coefH
coefH(as.data.frame(dichX,dichY))
polyX <- rbinom(1000,4,c(.25,.25,.25,.25))
polyX
polyX <- rbinom(1000,4,c(.25,.25,.25,.25))
polyY <- rbinom(1000,4,
c(sum(dichX==1)/length(dichX),
sum(dichX==2)/length(dichX),
sum(dichX==3)/length(dichX),
sum(dichX==4)/length(dichX))
)
cov(polyX,polyY)
cor(polyX,polyY)
source('~/.active-rstudio-document')
-3.29365/(sqrt(56.89931)*sqrt(.2080102))
sqrt(.059)
723/32
sqrt(3.5)
library(statcheck)
library("statcheck")
library(devtools)
install_github(statcheck, username=SachaEpskamp)
install_github("SachaEpskamp/statcheck")
install_github()
install_github
?ifelse
?identify
?attr
x <- 1
attr(x)
attr(x,1)
attr(x,'1')
x <- 1:10
attr(x,"dim") <- c(2, 5)
x
library(devtools)
install_github("lineprof",user="hadley")
library(statcheck)
?find_ex
??find_ex
source(find_ex("read-delim.r"))
library(lineprof)
source(find_ex("read-delim.r"))
wine <- find_ex("wine.csv")
read_delim(wine, sep = ",")
x <- lineprof(read_delim(wine, sep = ","), torture = TRUE)
shine(x)
install.packages('shiny')
library(shiny)
shine(x)
install.packages('shinySlickgrid')
install_github("shiny-slickgrid", user="wch")
library(shiny-slickgrid)
library(shiny-slickgrid)
library("shinySlickgrid", lib.loc="C:/Users/Chris/Documents/R/win-library/3.0")
library(shinySlickgrid)
library(statcheck)
source(find_ex("read-delim.r"))
wine <- find_ex("wine.csv")
install.packages('shiny')
install.packages("shiny")
if(!require(lineprof)){install_github("lineprof",user="hadley")}
if(!require(shinySlickgrid)){install_github("shiny-slickgrid", user="wch")}
if(!require(shiny)){install.packages('shiny')}
library(lineprof)
library(shinySlickgrid)
library(statcheck)
source(find_ex("read-delim.r"))
wine <- find_ex("wine.csv")
x <- lineprof(read_delim(wine, sep = ","), torture = TRUE)
shine(x)
shine(x)
shine(x)
x
library(pingr)
ping("mario")
ping("fanfare")
ping("ping")
ping("coin")
ping("complete")
x <- c(3,9,6,4,5,6,8,4)
mean(x)
sd(x)
sd(x)/sqrt(8)
mypath <- "C:/Users/Chris/Dropbox/MSc ReMa/Cyberball Meta-analysis/"
setwd(mypath)
require(xlsx);dat<-read.csv("4.Analyzing/data_cleaned.csv",sep=";",dec=".")
selIlja <- dat$Model_immediate==1 & dat$Needs1>0
selIlja
dat$Paper_nr[selIlja]
sort(dat$Paper_nr[selIlja])
sort(unique(dat$Paper_nr[selIlja]))
selIlja <- dat$Model_delayed==1 & dat$Needs2>0
sort(unique(dat$Paper_nr[selIlja]))
mypath <- "C:/Users/Chris/Dropbox/CJM/Masterproject/"
setwd(mypath)
copilotID <- read.table("copilotID.txt")
selNA <- copilotID$p_value_reported>1
sum(selNA[!is.na(selNA)])
copilotID$p_value_reported[selNA] <- NA
require(pingr)
ping("mario")
ping("fanfare")
ping("ping")
mypath <- "C:/Users/Chris/Dropbox/CJM/Masterproject/"
setwd(mypath)
copilotID <- read.table("copilotID.txt")
selNA <- copilotID$p_value_reported>1
sum(selNA[!is.na(selNA)])
copilotID$p_value_reported[selNA] <- NA
curve(exp(-x+.5), from=1, to=.05, add=F, xlim=c(1,.05), ylim=c(0,2.5)
, xlab="P-value", ylab="Density")
curve(exp(-1.5*x+.75), from=1, to=.05, add=T)
abline(h=1, lty=2)
# text(.15,.9, expression(Under~H[0]), cex=.7)
# text(.15,1.53, expression(Under~H[A]), cex=.7)
text(.93,.85, "Upperbound", cex=.8)
text(.12,1.21, "Lowerbound", cex=.8)
arrows(1,.6
,1,1
,code=2)
arrows(.05,1.568312
,.05,1
,code=2)
legend(x = .3, y = .5
, legend = c(expression(Under~H[0]), expression(Under~H[A]))
, lty = c(2,1)
selP <- NULL
ratioSig <- NULL
ratioNSig <- NULL
fishTest <- NULL
fishTestCompl <- NULL
pfishTest <- NULL
pfishTestCompl <- NULL
meanP <- NULL
uniqID <- unique(copilotID$ideed)
selPtrunc <- NULL
meanPtrunc <- NULL
for(i in 1:length(uniqID)){
selP[[i]] <- na.omit(copilotID$p_value_reported[uniqID[i]==copilotID$ideed])
selPtrunc[[i]] <- selP[[i]][selP[[i]]>.05]
ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
ratioNSig[i] <- 1-ratioSig[i]
selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
selPStarCompl <- 1-selPStar
fishTest[i] <- -sum(log(selPStar))
fishTestCompl[i] <- -sum(log(selPStarCompl))
pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
meanP[i] <- mean(selP[[i]])
meanPtrunc[i] <- mean(selPtrunc[[i]])
}
selP <- NULL
ratioSig <- NULL
ratioNSig <- NULL
fishTest <- NULL
fishTestCompl <- NULL
pfishTest <- NULL
pfishTestCompl <- NULL
meanP <- NULL
uniqID <- unique(copilotID$ideed)
selPtrunc <- NULL
meanPtrunc <- NULL
# Calculate all Fisher values and p-values
# Both normal and complement
for(i in 1:length(uniqID)){
selP[[i]] <- na.omit(copilotID$p_value_reported[uniqID[i]==copilotID$ideed])
selPtrunc[[i]] <- selP[[i]][selP[[i]]>.05]
ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
ratioNSig[i] <- 1-ratioSig[i]
selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
selPStarCompl <- 1-selPStar
fishTest[i] <- -sum(log(selPStar))
fishTestCompl[i] <- -sum(log(selPStarCompl))
pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
meanP[i] <- mean(selP[[i]])
meanPtrunc[i] <- mean(selPtrunc[[i]])
}
selPStar
selP
ratioSig
plot(ratioSig)
hist(ratioSig)
copilotID$test_statistic
copilotID$test_comparison
copilotID$test_statistic_value
as.numeric(copilotID$test_statistic_value)
type.convert(copilotID$test_statistic_value, dec=",")
type.convert(as.character(copilotID$test_statistic_value), dec=",")
type.convert(as.string(copilotID$test_statistic_value), dec=",")
as.character(copilotID$test_statistic_value)
as.numeric(as.character(copilotID$test_statistic_value))
type.convert(as.character(copilotID$test_statistic_value), dec=",")
?type.conver
?type.convert
?convertdec
type.convert(as.character(copilotID$test_statistic_value), dec=",")
as.numeric(type.convert(as.character(copilotID$test_statistic_value), dec=","))
names(copilotID)
head(copilotID)
head(copilotID)
head(copilotID[,c(2,4,5,6,8,10,11,12)])
write.table(copilotID[,c(2,4,5,6,8,10,11,12)],"copilotID2.txt")
names(copilotID)
head(copilotID[,c(57,2,4,5,6,8,10,11,12)])
write.table(copilotID[,c(57,2,4,5,6,8,10,11,12)],"copilotID2.txt")
x <- copilotID[,c(57,2,4,5,6,8,10,11,12)]
names(x) <- c("pap_id","stat_id","test_statistic", "df1","df2")
x
names(x)
head(copilotID[,c(57,2,4,5,6,8,10,11,12)])
names(x) <- c("pap_id","stat_id","test_statistic", "df1","df2", "test_statistic_value", "p_value_reported", "p_value_computed", "raw_result_reported")
x
head(x)
write.table(x,"copilotID3.txt")
x
x[1094,]
x[1094,5]
as.numeric(x[1094,5])
x
class(x[,1])
class(x[,2])
class(x[,3])
class(x[,4])
class(x[,5])
names(x)
read.table("copilotID3.txt")
?read.table
copilotID <- read.table("copilotID3.txt", dec=c('.',','))
read.table("copilotID3.txt", dec=c('.',','))
copilotID
copilotID <- read.table("copilotID3.txt", dec=c('.',','))
head(copilotID)
tail(copilotID)
class(copilotID$test_statistic_value)
mypath <- "C:/Users/Chris/Dropbox/CJM/Masterproject/"
setwd(mypath)
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt", dec=c('.',','))
copilot
selNA <- copilotID$p_value_computed>1
selNA
sum(selNA)
selNA <- copilotID$p_value_reported>1
sum(selNA)
selNA
summary(copilotID$p_value_reported)
summary(copilotID$p_value_computed)
selNA <- copilotID$p_value_computed>=1
selNA
sum(selNA)
selNA <- copilotID$p_value_computed>=1
sum(selNA[!is.na(selNA)])
copilotID$p_value_computed[selNA] <- NA
copilotID$p_value_computed
uniqID <- unique(copilot$pap_id)
uniqID
selP <- NULL
ratioSig <- NULL
ratioNSig <- NULL
fishTest <- NULL
fishTestCompl <- NULL
pfishTest <- NULL
pfishTestCompl <- NULL
meanP <- NULL
uniqID <- unique(copilot$pap_id)
selPtrunc <- NULL
meanPtrunc <- NULL
copilot
copilot$p_value_computed
grepl
?grepl
grepl("(\\d).\\d+", copilot$test_statistic_value)
head(grepl("(\\d).\\d+", copilot$test_statistic_value))
head(copilot$test_statistic_value)
sum(grepl("(\\d).\\d+", copilot$test_statistic_value))
sum(grepl("(\\d).\\d+", copilot$test_statistic_value))+sum(grepl("(\\d),\\d+", copilot$test_statistic_value))
length(copilot$test_statistic_value)
sub(",",".",copilot$test_statistic_value)
as.numeric(sub(",",".",copilot$test_statistic_value))
copilot$test_statistic_value <- as.numeric(sub(",",".",copilot$test_statistic_value))
is.na(copilot$test_statistic)
sum(is.na(copilot$test_statistic))
copilot$test_statistic_value <- suppressWarnings(as.numeric(sub(",",".",copilot$test_statistic_value)))
copilot$test_statistic
copilot$test_statistic==Chi2
copilot$test_statistic=="Chi2"
sum(copilot$test_statistic=="Chi2")
sum(copilot$test_statistic=="r")
sum(copilot$test_statistic=="t")
sum(copilot$test_statistic=="F")
sum(copilot$test_statistic=="z")
sum(copilot$test_statistic=="Z")
for(i in 1:length(uniqID)){
selP[[i]] <- na.omit(copilotID$p_value_reported[uniqID[i]==copilotID$ideed])
selPtrunc[[i]] <- selP[[i]][selP[[i]]>.05]
ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
ratioNSig[i] <- 1-ratioSig[i]
selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
selPStarCompl <- 1-selPStar
fishTest[i] <- -sum(log(selPStar))
fishTestCompl[i] <- -sum(log(selPStarCompl))
pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
meanP[i] <- mean(selP[[i]])
meanPtrunc[i] <- mean(selPtrunc[[i]])
}
mypath <- "C:/Users/Chris/Dropbox/CJM/Masterproject/"
setwd(mypath)
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt", dec=c('.',','))
selNA <- copilotID$p_value_computed>=1
sum(selNA[!is.na(selNA)])
copilotID$p_value_computed[selNA] <- NA
# Replace all comma's with decimal points and make the variable numeric.
copilot$test_statistic_value <- suppressWarnings(as.numeric(sub(",",".",copilot$test_statistic_value)))
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt", dec=c('.',','))
# Removing out of bounds p-values
selNA <- copilot$p_value_computed>=1
sum(selNA[!is.na(selNA)])
copilot$p_value_computed[selNA] <- NA
# Replace all comma's with decimal points and make the variable numeric.
copilot$test_statistic_value <- suppressWarnings(as.numeric(sub(",",".",copilot$test_statistic_value)))
?assign
for(i in 1:length(uniqID)){
assign(selP[[i]], na.omit(copilotID$p_value_reported[uniqID[i]==copilotID$ideed]))
assign(selPtrunc[[i]], selP[[i]][selP[[i]]>.05])
#   ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
#   ratioNSig[i] <- 1-ratioSig[i]
#   selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
#   selPStarCompl <- 1-selPStar
#   fishTest[i] <- -sum(log(selPStar))
#   fishTestCompl[i] <- -sum(log(selPStarCompl))
#   pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
#   pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
#   meanP[i] <- mean(selP[[i]])
#   meanPtrunc[i] <- mean(selPtrunc[[i]])
}
for(i in 1:length(uniqID)){
assign(selP[[i]], na.omit(copilot$p_value_reported[uniqID[i]==copilot$pap_id]))
assign(selPtrunc[[i]], selP[[i]][selP[[i]]>.05])
#   ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
#   ratioNSig[i] <- 1-ratioSig[i]
#   selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
#   selPStarCompl <- 1-selPStar
#   fishTest[i] <- -sum(log(selPStar))
#   fishTestCompl[i] <- -sum(log(selPStarCompl))
#   pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
#   pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
#   meanP[i] <- mean(selP[[i]])
#   meanPtrunc[i] <- mean(selPtrunc[[i]])
}
uniqID <- unique(copilot$pap_id)
for(i in 1:length(uniqID)){
assign(selP[[i]], na.omit(copilot$p_value_reported[uniqID[i]==copilot$pap_id]))
assign(selPtrunc[[i]], selP[[i]][selP[[i]]>.05])
#   ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
#   ratioNSig[i] <- 1-ratioSig[i]
#   selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
#   selPStarCompl <- 1-selPStar
#   fishTest[i] <- -sum(log(selPStar))
#   fishTestCompl[i] <- -sum(log(selPStarCompl))
#   pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
#   pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
#   meanP[i] <- mean(selP[[i]])
#   meanPtrunc[i] <- mean(selPtrunc[[i]])
}
for(i in 1:length(uniqID)){
assign(selP[[i]], na.omit(copilot$p_value_reported[uniqID[i]==copilot$pap_id]))
#   assign(selPtrunc[[i]], selP[[i]][selP[[i]]>.05])
#   ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
#   ratioNSig[i] <- 1-ratioSig[i]
#   selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
#   selPStarCompl <- 1-selPStar
#   fishTest[i] <- -sum(log(selPStar))
#   fishTestCompl[i] <- -sum(log(selPStarCompl))
#   pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
#   pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
#   meanP[i] <- mean(selP[[i]])
#   meanPtrunc[i] <- mean(selPtrunc[[i]])
}
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt")
copilot
copilot$test_statistic_value <- suppressWarnings(as.numeric(sub(",",".",copilot$test_statistic_value)))
tail(copilot)
uniqID <- unique(copilot$pap_id)
selP <- NULL
ratioSig <- NULL
ratioNSig <- NULL
fishTest <- NULL
fishTestCompl <- NULL
pfishTest <- NULL
pfishTestCompl <- NULL
meanP <- NULL
selPtrunc <- NULL
meanPtrunc <- NULL
# Calculate all Fisher values and p-values
# Both normal and complement
for(i in 1:length(uniqID)){
selP[[i]] <- na.omit(copilotID$p_value_reported[uniqID[i]==copilotID$ideed])
selPtrunc[[i]] <- selP[[i]][selP[[i]]>.05]
ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
ratioNSig[i] <- 1-ratioSig[i]
selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
selPStarCompl <- 1-selPStar
fishTest[i] <- -sum(log(selPStar))
fishTestCompl[i] <- -sum(log(selPStarCompl))
pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
meanP[i] <- mean(selP[[i]])
meanPtrunc[i] <- mean(selPtrunc[[i]])
}
for(i in 1:length(uniqID)){
selP[[i]] <- na.omit(copilot$p_value_reported[uniqID[i]==copilot$ideed])
selPtrunc[[i]] <- selP[[i]][selP[[i]]>.05]
ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
ratioNSig[i] <- 1-ratioSig[i]
selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
selPStarCompl <- 1-selPStar
fishTest[i] <- -sum(log(selPStar))
fishTestCompl[i] <- -sum(log(selPStarCompl))
pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
meanP[i] <- mean(selP[[i]])
meanPtrunc[i] <- mean(selPtrunc[[i]])
}
