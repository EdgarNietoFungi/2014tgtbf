# a
1 + 32 + 1
# b
32 + 32 + 1
# c
1 + 1 + 1 + 1
# d
1 + 1 + 1 + 1 + 1 + 1
plot(soccerdat$height, soccerdat$weight, pch = 19, cex = .5)
plot(soccerdat$height, soccerdat$weight, pch = 19, cex = .5)
for(i in 1:32){
abline(lm(soccerdat$weight[as.numeric(soccerdat$country)==i]
~ soccerdat$height[as.numeric(soccerdat$country)==i]
), col = i, lwd = 1)}
?aova
?anova
lm(soccerdat$height ~ soccerdat$nation)
lm(soccerdat$height ~ soccerdat$country)
summary(lm(soccerdat$height ~ soccerdat$country))
summary(lm(soccerdat$weight ~ soccerdat$country*soccerdat$height))
K <- length(unique(soccerdat$country))
K
?count
??count
nj <- table(soccerdat$country)
nj
nj <- table(soccerdat$country); avgnj <- mean(nj)
avgnj
library(lme4)
lmer(soccerdat$weight ~ 1 + (1 | soccerdat$country) + soccerdat$height + (soccerdat$height | soccerdat$country))
lmer(soccerdat$weight ~ 1 + (1 | soccerdat$country) + soccerdat$height)
lmer(soccerdat$weight ~ 1 + (1 | soccerdat$country))
lmer(soccerdat$weight ~ 1)
lmer(soccerdat$weight ~ 1 + (1|soccerdat$country))
lmer(soccerdat$weight ~ 1 + (1|soccerdat$country), data=soccerdat)
lmer(soccerdat$weight ~ 1 + (1|soccerdat$country), debug = T)
# Hypothesis: we have a
K <- length(unique(soccerdat$country)); K                   # K = 32
nj <- table(soccerdat$country); avgnj <- mean(nj); avgnj    # nj = 23
anova(regGroup)
anova(regGroup)$F
anova(regGroup)$F[1]
ICC <- (anova(regGroup)$F[1]-1)/(anova(regGroup)$F[1]+23)
ICC
ICC <- (anova(ANCOVA)$F[1]-1)/(anova(ANCOVA)$F[1]+23)
ICC <- (anova(ANCOVA)$F[1]-1)/(anova(ANCOVA)$F[1]+23); ICC
ICC <- (anova(ANCOVAwInt)$F[1]-1)/(anova(ANCOVAwInt)$F[1]+23); ICC
install.packages('psych')
library(psych)
harmonic.mean(c(5,43,3,5,6,6,7))
geometric.mean(c(5,43,3,5,6,6,7))
harmonic.mean(rep(23,10))
geometric.mean(rep(23,10))
ICC <- (temp$F[1]-1)/(temp$F[1]-1+23); ICC
temp <- rbinom(100,.5)
?rbinom
temp <- rbinom(1,100,.5)
temp
temp
temp <- rbinom(1,100,.5)
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- replicate(100,rbinom(1,100,.5)); temp
hist(temp)
?pbinom
pbinom(80,1,.5)
pbinom(80,1,.5)
pbinom(80,1,.5)
pbinom(80,1,.5)
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
temp <- rbinom(1,100,.5); temp
plot(density(temp))
temp <- replicate(10000,rbinom(1,100,.5)); plot(density(temp)
)
temp >= 80
sum(temp >= 80)
N <- 10000000; temp <- replicate(N,rbinom(1,100,.5)); sum(temp >= 80)/N
?rpareto
?rpar
rpareto
if(!require(foreign)){install.packages('foreign')}
library(foreign)
x <- rnorm(100,5,.1)
write.foreign(data.frame(x),datafile="test.sav",package='SPSS')
?write.foreign
source('~/.active-rstudio-document', echo=TRUE)
write.foreign(data.frame(x)
write.foreign(data.frame(x)
, datafile = "test.sav"
, package = 'SPSS'
, codefile)
write.foreign(data.frame(x)
, datafile = "test.sav"
, package = 'SPSS'
, codefile = "SPSS")
data.frame(x)
write.foreign(data.frame(x)
, datafile = "test.txt"
, package = 'SPSS'
, codefile = "testcode.sps")
repl <- 1000
mean1 <- 5
sd1 <- 1
sd2 <- 1
mean2 <- 5.2
sample <- c(10,1000)
x1 <- replicate(repl,mean(rnorm(sample[1],mean1,sd1)))
y1 <- replicate(repl,mean(rnorm(sample[1],mean2,sd2)))
x2 <- replicate(repl,mean(rnorm(sample[2],mean1,sd1)))
y2 <- replicate(repl,mean(rnorm(sample[2],mean2,sd2)))
plot(density(x1),xlim = c(4,6.5), main = "")
lines(density(y1),col = 2)
repl <- 1000
mean1 <- 5
sd1 <- 1
sd2 <- 1
mean2 <- 5.2
sample <- c(10,1000)
x1 <- replicate(repl,mean(rnorm(sample[1],mean1,sd1)))
y1 <- replicate(repl,mean(rnorm(sample[1],mean2,sd2)))
x2 <- replicate(repl,mean(rnorm(sample[2],mean1,sd1)))
y2 <- replicate(repl,mean(rnorm(sample[2],mean2,sd2)))
par(mfrow=c(2,1))
plot(density(x1),xlim = c(4,6.5), main = "")
lines(density(y1),col = 2)
plot(density(x2),xlim = c(4,6.5), main = "")
lines(density(y2),col = 2)
tussentoets = 1.3
tentamencijfer = 6.5
eindcijfer = tussentoets + (10 â€“ tussentoets)/10 * tentamencijfer
tussentoets = 1.3
tentamencijfer = 6.5
eindcijfer = tussentoets + (10 - tussentoets)/10 * tentamencijfer
eindcijfer
library(statcheck)
install.packages('devtools')
library(devtools)
library(devtools)
library(devtools)
install_github('statcheck', user="MicheleNuijten")
library(statcheck)
mypath <- "D:/Chris/Dropbox/MSc ReMa/3Internship/w2w3w4"
setwd(mypath)
checkHTMLdir(dir="PDF_files_for_Error_project/JPSP/HTML files/")
checkPDF(file="PDF_files_for_Error_project/JPSP/PDF files/JPSP_Adler_2012_102_2_367_Living into the.pdf")
checkPDF(file="PDF_files_for_Error_project/JPSP/PDF files/JPSP_Adler_2012_102_2_367_Living into the.pdf")
checkPDF(file="PDF_files_for_Error_project/JPSP/PDF files/JPSP_Adler_2012_102_2_367_Living into the.pdf")
x <- checkPDFdir(dir="PDF_files_for_Error_project/JPSP/PDF files/")
?statcheck
?print.diagnose
library(inlinedocs)
install.packages('inlinedocs')
library(inlinedocs)
?package.skeleton.dx
?inlinedocs
getwd()
setwd("D:/Chris/Dropbox/Github/")
?package.skeleton.d
?package.skeleton.dx
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
?checkdir
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
warnings()
warnings()
package.skeleton.dx("statcheck")
?structure
?structure
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
package.skeleton.dx("statcheck")
# Masterfile source code
# Last updated: january 2014
# Contributor(s): Chris H.J. Hartgerink
# Change the object mypath to where you cloned the repository
mypath <- "C:/Users/Chris/Dropbox/CJM/Masterproject/"
mypath <- "D:/Chris/Dropbox/CJM/Masterproject/"
setwd(mypath)
# Work computer
mypath <- "D:/Chris/Dropbox/CJM/Masterproject/"
setwd(mypath)
# Work computer
mypath <- "D:/Chris/Dropbox/CJM/Masterproject/"
setwd(mypath)
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt")
selNA <- copilot$p_value_computed>=1
sum(selNA[!is.na(selNA)])
copilot$p_value_computed[selNA] <- NA
# Replace all comma's with decimal points and make the variable numeric.
copilot$test_statistic_value <- suppressWarnings(as.numeric(sub(",",".",copilot$test_statistic_value)))
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt")
copilot
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt")
selNA <- copilot$p_value_computed>=1
sum(selNA[!is.na(selNA)])
copilot
selNA <- copilot$p_value_computed>=1
sum(selNA[!is.na(selNA)])
copilot$p_value_computed[selNA] <- NA
# Replace all comma's with decimal points and make the variable numeric.
copilot$test_statistic_value <- suppressWarnings(as.numeric(sub(",",".",copilot$test_statistic_value)))
copilot
names(copilot)
head(copilot)
curve(exp(-x+.5), from=1, to=.05, add=F, xlim=c(1,.05), ylim=c(0,2.5)
, xlab="P-value", ylab="Density")
curve(exp(-1.5*x+.75), from=1, to=.05, add=T)
abline(h=1, lty=2)
# text(.15,.9, expression(Under~H[0]), cex=.7)
# text(.15,1.53, expression(Under~H[A]), cex=.7)
text(.93,.85, "Upperbound", cex=.8)
text(.12,1.21, "Lowerbound", cex=.8)
arrows(1,.6
,1,1
,code=2)
arrows(.05,1.568312
,.05,1
,code=2)
legend(x = .3, y = .5
, legend = c(expression(Under~H[0]), expression(Under~H[A]))
, lty = c(2,1)
,box.lwd = 0,box.col = "white",bg = "white")
?%in%
1 %in% copilot$pap_id
?where
??where
uniqID <- unique(copilot$pap_id)
selP <- NULL
ratioSig <- NULL
ratioNSig <- NULL
fishTest <- NULL
fishTestCompl <- NULL
pfishTest <- NULL
pfishTestCompl <- NULL
meanP <- NULL
selPtrunc <- NULL
meanPtrunc <- NULL
# Calculate all Fisher values and p-values
# Both normal and complement
for(i in 1:length(uniqID)){
selP[[i]] <- na.omit(copilot$p_value_reported[uniqID[i]==copilot$ideed])
selPtrunc[[i]] <- selP[[i]][selP[[i]]>.05]
ratioSig[i] <- sum(selP[[i]]<=.05)/length(selP[[i]])
ratioNSig[i] <- 1-ratioSig[i]
selPStar <- (selP[[i]][selP[[i]]>.05]-.05)/.95
selPStarCompl <- 1-selPStar
fishTest[i] <- -sum(log(selPStar))
fishTestCompl[i] <- -sum(log(selPStarCompl))
pfishTest[i] <- pgamma(fishTest[i], shape=length(selP))
pfishTestCompl[i] <- pgamma(fishTestCompl[i], shape=length(selP[[i]]))
meanP[i] <- mean(selP[[i]])
meanPtrunc[i] <- mean(selPtrunc[[i]])
}
selP
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt")
# Removing out of bounds p-values
selNA <- copilot$p_value_computed>=1
sum(selNA[!is.na(selNA)])
copilot$p_value_computed[selNA] <- NA
# Replace all comma's with decimal points and make the variable numeric.
copilot$test_statistic_value <- suppressWarnings(as.numeric(sub(",",".",copilot$test_statistic_value)))
na.omit(copilot$p_value_reported[uniqID[i]==copilot$ideed])
na.omit(copilot)
i in 1:10
unique(copilot$pap_id)
copilot$pap_id==1
nSigP
nSigP<-NULL
length(nSigP)
length(nSigP)==0
!length(nSigP)==0
temp <- data.frame(x,y)
x <- 0
y <- 1
temp <- data.frame(x,y)
temp
rbind(temp,data.frame(1,2))
rbind(temp,data.frame(x=1,y=2))
rm(temp)
rbind(temp,data.frame(x=1,y=2))
temp <- NULL
rbind(temp,data.frame(x=1,y=2))
FisherExTest <- function(# Compute Fisher's exact test for non-significant p-values.
### This function computes paper level Fisher test statistics, testing whether the distribution of non-significant p-values is uniform. Significant values indicate deviation from uniformity.
### Returns both the normal Fisher test, as well as the complement test.
### Computations are done for p*=log(p), where p is all non-significant p-values for each identifier.
x,
### Vector of p-values.
id
### Vector giving paper identifiers.
){
Res <- NULL
for(i in 1:length(unique(id)))
{
selP <- x[id==i]
nSigP <- selP[selP>.05]
SigP <- selP[selP<=.05]
if(!length(nSigP)==0){
FExTest <- -sum(log(nSigP))
# Compute the Fisher test statistic
FExTestCompl <- -sum(log(1-nSigP))
# Compute the complement Fisher test statistic
pFExTest <- pgamma()
pFExTestCompl <- pgamma()
# Compute p-values analytically
} else {
FExTest <- NA
FExTestCompl <- NA
pFExTest <- NA
pFExTestCompl <- NA
}
Res <- rbind(Res, data.frame(FExTest,pFExTest,FExTestCompl,pFExTestCompl,length(nSigP),length(SigP),length(nSigP)/length(selP)))
}
}
FisherExTest(x=copilot$p_value_computed,id=copilot$pap_id)
FisherExTest <- function(# Compute Fisher's exact test for non-significant p-values.
### This function computes paper level Fisher test statistics, testing whether the distribution of non-significant p-values is uniform. Significant values indicate deviation from uniformity.
### Returns both the normal Fisher test, as well as the complement test.
### Computations are done for p*=log(p), where p is all non-significant p-values for each identifier.
x,
### Vector of p-values.
id
### Vector giving paper identifiers.
){
Res <- NULL
for(i in 1:length(unique(id)))
{
selP <- x[id==i]
nSigP <- selP[selP>.05]
SigP <- selP[selP<=.05]
if(!length(nSigP)==0){
FExTest <- -sum(log(nSigP))
# Compute the Fisher test statistic
FExTestCompl <- -sum(log(1-nSigP))
# Compute the complement Fisher test statistic
pFExTest <- pgamma(FExTest, length(nSigP))
pFExTestCompl <- pgamma(FExTestCompl, length(nSigP))
# Compute p-values analytically
} else {
FExTest <- NA
FExTestCompl <- NA
pFExTest <- NA
pFExTestCompl <- NA
}
Res <- rbind(Res, data.frame(
Fish = FExTest,
PFish = pFExTest,
FishCompl = FExTestCompl,
PFishCompl = pFExTestCompl,
CountNSig = length(nSigP),
CountSig = length(SigP),
PercentNonSig = length(nSigP)/length(selP)))
}
}
FisherExTest(x=copilot$p_value_computed,id=copilot$pap_id)
FisherExTest <- function(# Compute Fisher's exact test for non-significant p-values.
### This function computes paper level Fisher test statistics, testing whether the distribution of non-significant p-values is uniform. Significant values indicate deviation from uniformity.
### Returns both the normal Fisher test, as well as the complement test.
### Computations are done for p*=log(p), where p is all non-significant p-values for each identifier.
x,
### Vector of p-values.
id
### Vector giving paper identifiers.
){
Res <- NULL
for(i in 1:length(unique(id)))
{
selP <- x[id==i]
nSigP <- selP[selP>.05]
SigP <- selP[selP<=.05]
if(!length(nSigP)==0){
FExTest <- -sum(log(nSigP))
# Compute the Fisher test statistic
FExTestCompl <- -sum(log(1-nSigP))
# Compute the complement Fisher test statistic
pFExTest <- pgamma(FExTest, length(nSigP))
pFExTestCompl <- pgamma(FExTestCompl, length(nSigP))
# Compute p-values analytically
} else {
FExTest <- NA
FExTestCompl <- NA
pFExTest <- NA
pFExTestCompl <- NA
}
Res <- rbind(Res, data.frame(
Fish = FExTest,
PFish = pFExTest,
FishCompl = FExTestCompl,
PFishCompl = pFExTestCompl,
CountNSig = length(nSigP),
CountSig = length(SigP),
PercentNonSig = length(nSigP)/length(selP)))
}
return(Res)
}
FisherExTest(x=copilot$p_value_computed,id=copilot$pap_id)
copilot[432,]
copilot[copilot$pap_id==432]
copilot[copilot$pap_id==432,]
copilot$pap_id==432
FisherExTest(x=copilot$p_value_computed,id=copilot$pap_id)
copilot[copilot$pap_id==413,]
FisherExTest <- function(# Compute Fisher's exact test for non-significant p-values.
### This function computes paper level Fisher test statistics, testing whether the distribution of non-significant p-values is uniform. Significant values indicate deviation from uniformity.
### Returns both the normal Fisher test, as well as the complement test.
### Computations are done for p*=log(p), where p is all non-significant p-values for each identifier.
x,
### Vector of p-values.
id
### Vector giving paper identifiers.
){
Res <- NULL
for(i in 1:length(unique(id)))
{
selP <- x[id==i]
nSigP <- na.omit(selP[selP>.05])
SigP <- na.omit(selP[selP<=.05])
if(!length(nSigP)==0){
FExTest <- -sum(log(nSigP))
# Compute the Fisher test statistic
FExTestCompl <- -sum(log(1-nSigP))
# Compute the complement Fisher test statistic
pFExTest <- pgamma(FExTest, length(nSigP))
pFExTestCompl <- pgamma(FExTestCompl, length(nSigP))
# Compute p-values analytically
} else {
FExTest <- NA
FExTestCompl <- NA
pFExTest <- NA
pFExTestCompl <- NA
}
Res <- rbind(Res, data.frame(
Fish = FExTest,
PFish = pFExTest,
FishCompl = FExTestCompl,
PFishCompl = pFExTestCompl,
CountNSig = length(nSigP),
CountSig = length(SigP),
PercentNonSig = length(nSigP)/length(selP)))
}
return(Res)
}
FisherExTest(x=copilot$p_value_computed,id=copilot$pap_id)
source("Analyzing//0. Functions/FisherExTest.R")
ResPilot <- FisherExTest(copilot$p_value_computed, copilot$pap_id)
source("Analyzing//0. Functions/TerminalDigits.R")
TerminalDigits(ResPilot$PFish)
hist(TerminalDigits(ResPilot$PFish))
hist(TerminalDigits(ResPilot$PFish))
copilot$test_statistic
copilot$test_statistic=="t"
unique(copilot$test_statistic)
r2t
r2t()
library(statcheck)
r2t()
copilot$df1
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt",stringsAsFactors=F)
copilot$df1
as.numeric(copilot$df1)
copilot$df1
as.numeric(copilot$df1)
copilot$df1[8035]
copilot$df1 <- suppressWarnings(as.numeric(sub(",",".",copilot$df1)))
copilot$df1
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt",stringsAsFactors=F)
copilot$df1[7931]
copilot$df2 <- suppressWarnings(as.numeric(sub(",",".",copilot$df2)))
