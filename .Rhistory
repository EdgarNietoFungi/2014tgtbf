for(i in 1:10000){
temp1[i] <- rnorm(1,5,.5)
temp2[i] <- rnorm(1,100,4)
print(plot(temp1,temp2,type="o"))
}
temp1 <- NULL
temp2 <- NULL
for(i in 1:10000){
temp1[i] <- rnorm(1,5,.5)
temp2[i] <- rnorm(1,100,4)
df <- plot(temp1,temp2,type="o")
print(df)
}
temp1 <- NULL
temp2 <- NULL
for(i in 1:10000){
temp1[i] <- rnorm(1,5,.5)
temp2[i] <- rnorm(1,100,4)
plot(temp1,temp2,type="o")
Sys.sleep(.09)
}
temp1 <- NULL
temp2 <- NULL
for(i in 1:10000){
temp1[i] <- rnorm(1,5,.5)
temp2[i] <- rnorm(1,100,4)
plot(temp1,temp2,type="o",col=i)
Sys.sleep(.09)
}
temp1 <- NULL
temp2 <- NULL
for(i in 1:10000){
temp1[i] <- rnorm(1,5,.5)
temp2[i] <- rnorm(1,100,4)
plot(temp1,temp2,type="o",col=i)
Sys.sleep(.09)
}
temp1 <- NULL
temp2 <- NULL
for(i in 1:10000){
temp1[i] <- rnorm(1,5,.5)
temp2[i] <- rnorm(1,100,4)
plot(temp1,temp2,type="o",col=i,lwd=5)
Sys.sleep(.09)
}
temp1 <- NULL
temp2 <- NULL
for(i in 1:10000){
temp1[i] <- rnorm(1,5,.5)
temp2[i] <- rnorm(1,100,4)
plot(temp1,temp2,type="o",col=i,lwd=5)
Sys.sleep(.09)
}
####
# some attractors in R - Pete Werner, 2013
####
# post here: http://petewerner.blogspot.com/2013/11/just-for-fun-attractors-in-r.html
# see also:
# http://paulbourke.net/fractals/peterdejong/
# http://paulbourke.net/fractals/clifford/
####
map <- function(x, imin, imax, omin, omax) {
return( (x - imin) / (imax - imin) * (omax - omin) + omin )
}
dejong <- function(x, y) {
for (i in 1:npoints) {
xn <- sin(a * y) - cos(b * x)
yn <- sin(c * x) - cos(d * y)
row <- round(map(xn, -2, 2, 1, width))
col <- round(map(yn, -2, 2, 1, height))
mat[row,col] <<- mat[row,col] + 1
x <- xn
y <- yn
}
}
clifford <- function(x, y) {
for (i in 1:npoints) {
xn <- sin(a * y) + c * cos(a * x)
yn <- sin(b * x) + d * cos(b * y)
row <- round(map(xn, -abs(c) - 1, abs(c) + 1, 1, width))
col <- round(map(yn, -abs(d) - 1, abs(d) + 1, 1, height))
mat[row,col] <<- mat[row,col] + 1
x <- xn
y <- yn
}
}
cvec <- grey(seq(0, 1, length=10))
#we end up with npoints * n points
npoints <- 8
n <- 100000
width <- 600
height <- 600
#make some random points
rsamp <- matrix(runif(n * 2, min=-2, max=2), nr=n)
#dejong
a <- 1.4
b <- -2.3
c <- 2.4
d <- -2.1
mat <- matrix(0, nr=height, nc=width)
#these can be slow with a lot of points
system.time(xx <- apply(rsamp, 1, function(x) dejong(x[1], x[2])))
####
# some attractors in R - Pete Werner, 2013
####
# post here: http://petewerner.blogspot.com/2013/11/just-for-fun-attractors-in-r.html
# see also:
# http://paulbourke.net/fractals/peterdejong/
# http://paulbourke.net/fractals/clifford/
####
map <- function(x, imin, imax, omin, omax) {
return( (x - imin) / (imax - imin) * (omax - omin) + omin )
}
dejong <- function(x, y) {
for (i in 1:npoints) {
xn <- sin(a * y) - cos(b * x)
yn <- sin(c * x) - cos(d * y)
row <- round(map(xn, -2, 2, 1, width))
col <- round(map(yn, -2, 2, 1, height))
mat[row,col] <<- mat[row,col] + 1
x <- xn
y <- yn
}
}
clifford <- function(x, y) {
for (i in 1:npoints) {
xn <- sin(a * y) + c * cos(a * x)
yn <- sin(b * x) + d * cos(b * y)
row <- round(map(xn, -abs(c) - 1, abs(c) + 1, 1, width))
col <- round(map(yn, -abs(d) - 1, abs(d) + 1, 1, height))
mat[row,col] <<- mat[row,col] + 1
x <- xn
y <- yn
}
}
cvec <- grey(seq(0, 1, length=10))
#we end up with npoints * n points
npoints <- 8
n <- 10000
width <- 600
height <- 600
#make some random points
rsamp <- matrix(runif(n * 2, min=-2, max=2), nr=n)
#dejong
a <- 1.4
b <- -2.3
c <- 2.4
d <- -2.1
mat <- matrix(0, nr=height, nc=width)
#these can be slow with a lot of points
system.time(xx <- apply(rsamp, 1, function(x) dejong(x[1], x[2])))
dens <- log(mat + 1)/round(log(max(mat)))
par(mar=c(0, 0, 0, 0))
image(t(dens), col=cvec, useRaster=T, xaxt='n', yaxt='n')
#clifford
a <- -1.4
b <- 1.6
c <- 1.0
d <- 0.7
mat <- matrix(0, nr=height, nc=width)
system.time(xx <- apply(rsamp, 1, function(x) clifford(x[1], x[2])))
dens <- log(mat + 1)/round(log(max(mat)))
par(mar=c(0, 0, 0, 0))
image(t(dens), col=cvec, useRaster=T, xaxt='n', yaxt='n')
####
# some attractors in R - Pete Werner, 2013
####
# post here: http://petewerner.blogspot.com/2013/11/just-for-fun-attractors-in-r.html
# see also:
# http://paulbourke.net/fractals/peterdejong/
# http://paulbourke.net/fractals/clifford/
####
map <- function(x, imin, imax, omin, omax) {
return( (x - imin) / (imax - imin) * (omax - omin) + omin )
}
dejong <- function(x, y) {
for (i in 1:npoints) {
xn <- sin(a * y) - cos(b * x)
yn <- sin(c * x) - cos(d * y)
row <- round(map(xn, -2, 2, 1, width))
col <- round(map(yn, -2, 2, 1, height))
mat[row,col] <<- mat[row,col] + 1
x <- xn
y <- yn
}
}
clifford <- function(x, y) {
for (i in 1:npoints) {
xn <- sin(a * y) + c * cos(a * x)
yn <- sin(b * x) + d * cos(b * y)
row <- round(map(xn, -abs(c) - 1, abs(c) + 1, 1, width))
col <- round(map(yn, -abs(d) - 1, abs(d) + 1, 1, height))
mat[row,col] <<- mat[row,col] + 1
x <- xn
y <- yn
}
}
cvec <- grey(seq(0, 1, length=10))
#we end up with npoints * n points
npoints <- 8
n <- 10000
width <- 600
height <- 600
#make some random points
rsamp <- matrix(runif(n * 2, min=-2, max=2), nr=n)
#dejong
a <- 1.4
b <- -2.3
c <- 2.4
d <- -2.1
mat <- matrix(0, nr=height, nc=width)
#these can be slow with a lot of points
system.time(xx <- apply(rsamp, 1, function(x) dejong(x[1], x[2])))
dens <- log(mat + 1)/round(log(max(mat)))
par(mar=c(0, 0, 0, 0))
image(t(dens), col=cvec, useRaster=T, xaxt='n', yaxt='n')
#clifford
a <- -1.4
b <- 1.6
c <- 1.0
d <- 0.7
mat <- matrix(0, nr=height, nc=width)
system.time(xx <- apply(rsamp, 1, function(x) clifford(x[1], x[2])))
dens <- log(mat + 1)/round(log(max(mat)))
par(mar=c(0, 0, 0, 0))
image(t(dens), col=cvec, useRaster=T, xaxt='n', yaxt='n')
temp1 <- NULL
temp2 <- NULL
for(i in 1:10000){
temp1[i] <- rnorm(1,5,.5)
temp2[i] <- rnorm(1,100,4)
plot(temp1,temp2,type="o",col=i,lwd=5)
Sys.sleep(.09)
}
?rbinom
y <- rbinom(100,1,prob = .5)
y
glm(y ~ x, family = binomial(logit))
y <- rbinom(100,1,prob = .5)
x <- rnorm(100,5,.6)
glm(y ~ x, family = binomial(logit))
logitModel <- glm(y ~ x, family = binomial(logit))
plot(logitModel)
plot(logitModel)
summary(logitModel)
seq(1:10)
?seq
seq(0,2,by=.01)
plot(seq(0,2,by=.01)^2,type="o")
plot(seq(0,10,by=.01)^2,type="o")
plot(seq(0,10,by=.1)^2,type="o")
plot(seq(0,10,by=.5)^2,type="o")
log(10)
log10(10)
log10(10)^-1
?curve
curve(.25*inv.logit(-4.25(x+.5))+inv.logit(4.25(x-1)), from=-3, to=3)
curve(.25*(exp(-4.25*(x+.5))/(1+exp(-4.25*(x+.5))))+(exp(4.25*(x-1))/(1+exp(4.25*(x-1))))), from=-3, to=3)
curve(.25*(exp(-4.25*(x+.5))/(1+exp(-4.25*(x+.5))))+(exp(4.25*(x-1))/(1+exp(4.25*(x-1))))),from=-3,to=3)
curve(.25*(exp(-4.25*(x+.5))/(1+exp(-4.25*(x+.5))))+(exp(4.25*(x-1))/(1+exp(4.25*(x-1)))),from=-3,to=3)
curve(.7*(exp(3.4*(x+.5))/(1+exp(3.4*(x+.5)))),from=-3,to=3)
curve(.7*(exp(3.4*(x+.5))/(1+exp(3.4*(x+.5)))),from=-3,to=3, ylim=c(0,1))
repl <- 1000
mean1 <- 5
sd1 <- 1
sd2 <- 1
mean2 <- 5.2
sample <- c(10,1000)
x1 <- replicate(repl,mean(rnorm(sample[1],mean1,sd1)))
y1 <- replicate(repl,mean(rnorm(sample[1],mean2,sd2)))
x2 <- replicate(repl,mean(rnorm(sample[2],mean1,sd1)))
y2 <- replicate(repl,mean(rnorm(sample[2],mean2,sd2)))
par(mfrow=c(2,1))
plot(density(x1),xlim = c(4,6.5), main = "")
lines(density(y1),col = 2)
plot(density(x2),xlim = c(4,6.5), main = "")
lines(density(y2),col = 2)
exp(-2.367)
exp(-2.367)/(1+exp(-2.367))
exp(.6071)/(1+exp(.6071))
exp(.6071-2.9744)/(1+exp(.6071-2.9744))
-5.299^2
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3)
gammai <- c(.3,5)
alphai <- c(.6,.8)
deltai <- c(-1,1)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="")
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
gammai <- c(.3,.5)
alphai <- c(.6,.8)
deltai <- c(-1,1)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
gammai <- c(.3,.5,1)
alphai <- c(.6,.8,.1)
deltai <- c(-1,1,0)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
gammai <- c(.3,.5,0)
alphai <- c(.6,.8,.1)
deltai <- c(-1,1,0)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
gammai <- c(.3,.5,0)
alphai <- c(.6,.8,1)
deltai <- c(-1,1,0)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="3PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
@
curve((((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="2PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="2PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp((x-deltai[1])))/(1+exp((x-deltai[1]))))), from=-3, to=3, main="1PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp((x-deltai[2])))/(1+exp((x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp((x-deltai[3])))/(1+exp((x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
par(mfrow=c(3,1))
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="3PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="2PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp((x-deltai[1])))/(1+exp((x-deltai[1]))))), from=-3, to=3, main="1PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp((x-deltai[2])))/(1+exp((x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp((x-deltai[3])))/(1+exp((x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
options(height=100)
gammai <- c(.3,.5,0)
alphai <- c(.6,.8,1)
deltai <- c(-1,1,0)
par(mfrow=c(3,1))
curve((gammai[1]+(1-gammai[1])*((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="3PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((gammai[2]+(1-gammai[2])*((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((gammai[3]+(1-gammai[3])*((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp(alphai[1]*(x-deltai[1])))/(1+exp(alphai[1]*(x-deltai[1]))))), from=-3, to=3, main="2PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp(alphai[2]*(x-deltai[2])))/(1+exp(alphai[2]*(x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp(alphai[3]*(x-deltai[3])))/(1+exp(alphai[3]*(x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
curve((((exp((x-deltai[1])))/(1+exp((x-deltai[1]))))), from=-3, to=3, main="1PLM",ylab="",xlab="",ylim=c(0,1),xlim=c(-3,3))
curve((((exp((x-deltai[2])))/(1+exp((x-deltai[2]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=2)
curve((((exp((x-deltai[3])))/(1+exp((x-deltai[3]))))), from=-3, to=3, main="",ylab="",xlab="",add=T,col=3)
inf
dichX <- rbinom(1000,1,.5)
dichX
dichY <- rbinom(1000,1,sum(dichX==1)/length(dichX))
tab(dichX,dichY)
table(dichX,dichY,addmargins=T)
table(dichX,dichY)
phi(dichX,dichY)
dichX <- rbinom(1000,1,.5)
dichY <- rbinom(1000,1,sum(dichX==1)/length(dichX))
polyX <- rbinom(1000,1,.5)
polyY <- rbinom(1000,1,sum(dichX==1)/length(dichX))
length(dichY)
length(dichX)
summary(dichY,dichX)
table(dichX,dichY)
library(mokken)
??mokken
?coefH
coefH(as.data.frame(dichX,dichY))
polyX <- rbinom(1000,4,c(.25,.25,.25,.25))
polyX
polyX <- rbinom(1000,4,c(.25,.25,.25,.25))
polyY <- rbinom(1000,4,
c(sum(dichX==1)/length(dichX),
sum(dichX==2)/length(dichX),
sum(dichX==3)/length(dichX),
sum(dichX==4)/length(dichX))
)
cov(polyX,polyY)
cor(polyX,polyY)
source('~/.active-rstudio-document')
-3.29365/(sqrt(56.89931)*sqrt(.2080102))
sqrt(.059)
723/32
sqrt(3.5)
library(statcheck)
library("statcheck")
library(devtools)
install_github(statcheck, username=SachaEpskamp)
install_github("SachaEpskamp/statcheck")
install_github()
install_github
?ifelse
?identify
?attr
x <- 1
attr(x)
attr(x,1)
attr(x,'1')
x <- 1:10
attr(x,"dim") <- c(2, 5)
x
library(devtools)
install_github("lineprof",user="hadley")
library(statcheck)
?find_ex
??find_ex
source(find_ex("read-delim.r"))
library(lineprof)
source(find_ex("read-delim.r"))
wine <- find_ex("wine.csv")
read_delim(wine, sep = ",")
x <- lineprof(read_delim(wine, sep = ","), torture = TRUE)
shine(x)
install.packages('shiny')
library(shiny)
shine(x)
install.packages('shinySlickgrid')
install_github("shiny-slickgrid", user="wch")
library(shiny-slickgrid)
library(shiny-slickgrid)
library("shinySlickgrid", lib.loc="C:/Users/Chris/Documents/R/win-library/3.0")
library(shinySlickgrid)
library(statcheck)
source(find_ex("read-delim.r"))
wine <- find_ex("wine.csv")
install.packages('shiny')
install.packages("shiny")
if(!require(lineprof)){install_github("lineprof",user="hadley")}
if(!require(shinySlickgrid)){install_github("shiny-slickgrid", user="wch")}
if(!require(shiny)){install.packages('shiny')}
library(lineprof)
library(shinySlickgrid)
library(statcheck)
source(find_ex("read-delim.r"))
wine <- find_ex("wine.csv")
x <- lineprof(read_delim(wine, sep = ","), torture = TRUE)
shine(x)
shine(x)
shine(x)
x
library(pingr)
ping("mario")
ping("fanfare")
ping("ping")
ping("coin")
ping("complete")
x <- c(3,9,6,4,5,6,8,4)
mean(x)
sd(x)
sd(x)/sqrt(8)
?seq
pow <- c(seq(0,.7,by=.1),seq(.8,.99,.02))
pow
n <- c(4,9,15,22,
29,38,49,64,68,72,77,82,88,96,105,118,140)
pow <- c(seq(0,.7,by=.1),seq(.8,.99,.02))
plot(n,pow)
length(n)
length(pow)
pow
n <- c(4,9,15,22,
29,38,49,64,68,72,77,82,88,96,105,118,140)
pow <- c(seq(0.1,.7,by=.1),seq(.8,.99,.02))
plot(n,pow)
plot(pow,n)
plot(n,pow)
lm(pow~exp(n))
lm(pow~0+exp(n))
summary(lm(pow~0+exp(n)))
summary(lm(pow~0+(n)))
summary(lm(pow~0+exp(n)))
summary(lm(exp(pow)~0+(n)))
library(statcheck)
?statcheck
?getHTML
?checkHTML
library(inlinedocs)
??inlinedocs
?package.skeleton.dx
?rt
pt(6.44,6)
1926.91-542-112-25-8-19
mypath <- "C:/Users/Chris/Dropbox/CJM/Masterproject/"
setwd(mypath)
source("Analyzing//0. Functions/FisherExTest.R")
source("Analyzing//0. Functions/TerminalDigits.R")
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt",stringsAsFactors=F)
copilot$p_value_computed==1
copilot$p_value_computed[copilot$p_value_computed==1]
copilot$pap_id[copilot$p_value_computed==1]
copilot$stat_id[copilot$p_value_computed==1]
temp <- copilot$stat_id[copilot$p_value_computed==1]
copilot <- read.table("Analyzing//1. Pilot study/copilot.txt",stringsAsFactors=F)
# Removing out of bounds p-values
selNA <- copilot$p_value_computed>=1
sum(selNA[!is.na(selNA)])
copilot$p_value_computed[selNA] <- NA
# Replace all comma's with decimal points and make the variable numeric.
copilot$test_statistic_value <- suppressWarnings(as.numeric(sub(",",".",copilot$test_statistic_value)))
copilot$df1 <- suppressWarnings(as.numeric(sub(",",".",copilot$df1)))
copilot$df2 <- suppressWarnings(as.numeric(sub(",",".",copilot$df2)))
ResPilot <- FisherExTest(copilot$p_value_computed, copilot$pap_id)
ResPilot
ResPilot$FishCompl
ResPilot$FishCompl[temp]
